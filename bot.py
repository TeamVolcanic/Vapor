import discord
from discord.ext import commands
from discord import app_commands
import os
from dotenv import load_dotenv
from datetime import datetime
import google.generativeai as genai
import subprocess

# Load secrets
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Configure Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("models/gemini-pro")

# Discord setup
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

# State
cooldowns = {}
ticket_counter = {}
reaction_roles = {}

# FFmpeg test
try:
    result = subprocess.run(["ffmpeg", "-version"], capture_output=True, text=True)
    print("FFmpeg version:", result.stdout.splitlines()[0])
except Exception as e:
    print("FFmpeg test failed:", e)

# Slash commands (ticketpanel, verificationpanel, verify, mverify, reactionrole, detailmessage, prompt)
# [Insert your full command logic here ‚Äî I‚Äôll paste it in chunks if you want]

@bot.tree.command(name="prompt")
@app_commands.describe(channel="Channel to post the response", prompt="Your message or question")
async def prompt(interaction: discord.Interaction, channel: discord.TextChannel, prompt: str):
    try:
        response = model.generate_content(prompt)
        text = response.text.strip()
    except Exception as e:
        text = f"‚ö†Ô∏è Gemini API error: {e}"

    embed = discord.Embed(
        title="üí° Vapor Insight",
        description=text,
        color=discord.Color.blurple()
    )
    embed.set_footer(text="Generated by Gemini")
    await channel.send(embed=embed)
    await interaction.response.send_message("‚úÖ Insight posted.", ephemeral=True)

@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ Vapor is online as {bot.user}")

if __name__ == "__main__":
    if not TOKEN:
        print("‚ùå DISCORD_TOKEN missing in .env")
    else:
        bot.run(TOKEN)
