import discord
from discord.ext import commands
from discord import app_commands
import os
os.system("apt-get update && apt-get install -y ffmpeg > /dev/null 2>&1")
from dotenv import load_dotenv
from datetime import datetime
import google.generativeai as genai
import subprocess

# -------------------------------
# Load environment variables
# -------------------------------
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# -------------------------------
# FFmpeg check (optional)
# -------------------------------
try:
    result = subprocess.run(["ffmpeg", "-version"], capture_output=True, text=True)
    print("üéµ FFmpeg version:", result.stdout.splitlines()[0])
except Exception as e:
    print("‚ö†Ô∏è FFmpeg not found:", e)

# -------------------------------
# Configure Gemini
# -------------------------------
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel("models/gemini-pro")

# -------------------------------
# Discord setup
# -------------------------------
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Track active tickets and reaction roles
active_tickets = {}
reaction_roles = {}

# -------------------------------
# Slash command: prompt (Gemini AI)
# -------------------------------
@bot.tree.command(name="prompt", description="Ask Gemini AI a question or generate content")
@app_commands.describe(channel="Channel to post the response", prompt="Your message or question")
async def prompt(interaction: discord.Interaction, channel: discord.TextChannel, prompt: str):
    await interaction.response.send_message("ü™Ñ Generating AI insight...", ephemeral=True)

    try:
        response = await bot.loop.run_in_executor(None, gemini_model.generate_content, prompt)
        text = response.text.strip()
        if len(text) > 2000:
            text = text[:1990] + "... (truncated)"
    except Exception as e:
        text = f"‚ö†Ô∏è Gemini API error: {e}"

    embed = discord.Embed(
        title="üí° Gemini Insight",
        description=text,
        color=discord.Color.blurple(),
        timestamp=datetime.utcnow()
    )
    embed.set_footer(text="Generated by Gemini")
    await channel.send(embed=embed)


# -------------------------------
# Slash command: ticketpanel
# -------------------------------
@bot.tree.command(name="ticketpanel", description="Create a ticket panel")
@app_commands.describe(channel="Channel to post the ticket panel")
async def ticketpanel(interaction: discord.Interaction, channel: discord.TextChannel):
    class TicketView(discord.ui.View):
        @discord.ui.button(label="üé´ Open Ticket", style=discord.ButtonStyle.blurple)
        async def create_ticket(self, button: discord.ui.Button, interaction: discord.Interaction):
            guild = interaction.guild
            user = interaction.user
            category = discord.utils.get(guild.categories, name="Tickets")
            if not category:
                category = await guild.create_category("Tickets")

            # Prevent duplicates
            if user.id in active_tickets:
                await interaction.response.send_message("‚ö†Ô∏è You already have an open ticket.", ephemeral=True)
                return

            # Create ticket channel
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(view_channel=False),
                user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
                guild.me: discord.PermissionOverwrite(view_channel=True)
            }
            ticket_channel = await guild.create_text_channel(
                f"ticket-{user.name}",
                category=category,
                overwrites=overwrites
            )

            active_tickets[user.id] = ticket_channel.id
            await ticket_channel.send(
                embed=discord.Embed(
                    title="üéüÔ∏è Support Ticket",
                    description=f"{user.mention}, our team will assist you shortly.",
                    color=discord.Color.green()
                )
            )
            await interaction.response.send_message(f"‚úÖ Ticket created: {ticket_channel.mention}", ephemeral=True)

    embed = discord.Embed(
        title="üéüÔ∏è Support Tickets",
        description="Click the button below to open a ticket with our team.",
        color=discord.Color.blurple()
    )
    await channel.send(embed=embed, view=TicketView())
    await interaction.response.send_message("‚úÖ Ticket panel created.", ephemeral=True)


# -------------------------------
# Slash command: embedbutton
# -------------------------------
@bot.tree.command(name="embedbutton", description="Send an embed with a clickable button")
@app_commands.describe(channel="Channel to post the embed", title="Embed title", message="Embed message")
async def embedbutton(interaction: discord.Interaction, channel: discord.TextChannel, title: str, message: str):
    class ButtonView(discord.ui.View):
        @discord.ui.button(label="üîó Click Me", style=discord.ButtonStyle.green)
        async def button_click(self, button: discord.ui.Button, interaction: discord.Interaction):
            await interaction.response.send_message("‚úÖ You clicked the button!", ephemeral=True)

    embed = discord.Embed(title=title, description=message, color=discord.Color.green())
    await channel.send(embed=embed, view=ButtonView())
    await interaction.response.send_message("‚úÖ Embed with button sent.", ephemeral=True)


# -------------------------------
# Slash command: reactionrole
# -------------------------------
@bot.tree.command(name="reactionrole", description="Create a reaction role message")
@app_commands.describe(channel="Channel to post message", emoji="Emoji to react with", role="Role to assign")
async def reactionrole(interaction: discord.Interaction, channel: discord.TextChannel, emoji: str, role: discord.Role):
    message = await channel.send(
        embed=discord.Embed(
            title="üé≠ Reaction Role",
            description=f"React with {emoji} to get the {role.mention} role.",
            color=discord.Color.orange()
        )
    )
    await message.add_reaction(emoji)
    reaction_roles[message.id] = {"emoji": emoji, "role_id": role.id}
    await interaction.response.send_message("‚úÖ Reaction role set.", ephemeral=True)


# -------------------------------
# Reaction events
# -------------------------------
@bot.event
async def on_raw_reaction_add(payload: discord.RawReactionActionEvent):
    if payload.message_id in reaction_roles:
        data = reaction_roles[payload.message_id]
        if str(payload.emoji) == data["emoji"]:
            guild = bot.get_guild(payload.guild_id)
            role = guild.get_role(data["role_id"])
            member = guild.get_member(payload.user_id)
            if member and role:
                await member.add_roles(role)
                print(f"‚úÖ Added {role.name} to {member.display_name}")


@bot.event
async def on_raw_reaction_remove(payload: discord.RawReactionActionEvent):
    if payload.message_id in reaction_roles:
        data = reaction_roles[payload.message_id]
        if str(payload.emoji) == data["emoji"]:
            guild = bot.get_guild(payload.guild_id)
            role = guild.get_role(data["role_id"])
            member = guild.get_member(payload.user_id)
            if member and role:
                await member.remove_roles(role)
                print(f"‚ùå Removed {role.name} from {member.display_name}")


# -------------------------------
# Bot ready
# -------------------------------
@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ Logged in as {bot.user} | Ready on {len(bot.guilds)} servers.")


# -------------------------------
# Run bot
# -------------------------------
if __name__ == "__main__":
    if not TOKEN:
        print("‚ùå DISCORD_TOKEN missing in .env")
    else:
        bot.run(TOKEN)
